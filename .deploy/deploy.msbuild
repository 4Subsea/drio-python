<?xml version="1.0" ?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)</SolutionDir>
    <DeployDir Condition="$(DeployDir) == ''">$(SolutionDir)\.deploy</DeployDir>
    <PackageDir Condition="$(PackageDir) == ''">$(SolutionDir)\packages</PackageDir>
    <BuildDir Condition="$(BuildDir) == ''">$(SolutionDir)\build</BuildDir>
    <NuGetExePath>$(SolutionDir)\.nuget\v2.7\nuget.exe</NuGetExePath>
    <OctoExePath>$(PackageDir)\OctopusTools.2.6.3.59\Octo.exe</OctoExePath>
    <OctoPackTargetsDirectory>$(PackageDir)\OctoPack.3.6.1\build</OctoPackTargetsDirectory>
    <OctoPackTargetsPath>$(OctoPackTargetsDirectory)\OctoPack.targets</OctoPackTargetsPath>
    <OctoPackOctoPackTasksAssembly>$(OctoPackTargetsDirectory)\OctoPack.Tasks.dll</OctoPackOctoPackTasksAssembly>

    <DeploymentFeedPath Condition="$(DeploymentFeedPath) == ''"></DeploymentFeedPath>
    <DeploymentFeedApiKey Condition="$(DeploymentFeedApiKey) == ''"></DeploymentFeedApiKey>

    <OctopusApiKey Condition="$(OctopusApiKey) == ''"></OctopusApiKey>
    <OctopusServer Condition="$(OctopusServer) == ''"></OctopusServer>
    <OctopusProject Condition="$(OctopusProject) == ''"></OctopusProject>
    <OctopusTargetEnvironment Condition="$(OctopusTargetEnvironment) == ''"></OctopusTargetEnvironment>
    <OctopusCreateRelease Condition="$(OctopusCreateRelease) == ''">False</OctopusCreateRelease>
    <OctopusPerformDeploy Condition="$(OctopusPerformDeploy) == ''">False</OctopusPerformDeploy>

  </PropertyGroup>

  <!-- Declare using tasks -->
  <UsingTask TaskName="OctoPack.Tasks.CreateOctoPackPackage" AssemblyFile="$(OctoPackOctoPackTasksAssembly)" />
  <UsingTask TaskName="ReplaceFileText" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
      <MatchExpression ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                    File.WriteAllText(
                        OutputFilename,
                        Regex.Replace(File.ReadAllText(InputFilename), MatchExpression, ReplacementText)
                        );
                ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Declare using tasks done -->

  <PropertyGroup>
    <Major>$(PackageVersion.Split('.')[0])</Major>
    <Minor>$(PackageVersion.Split('.')[1])</Minor>
    <Build>$(PackageVersion.Split('.')[2])</Build>
    <LibVersion>$(Major).$(Minor).$(Build)</LibVersion>
  </PropertyGroup>

  <Target Name="ValidateDeploymentFeedApiKey">
    <Error Condition="$(DeploymentFeedApiKey) == ''" Text="Deployment feed api key was not specified" />
  </Target>
  <Target Name="ValidateOctopusApiKey">
    <Error Condition="$(OctopusApiKey) == ''" Text="Octopus api key was not specified" />
  </Target>
  <Target Name="ValidateKeys" DependsOnTargets="ValidateOctopusApiKey;ValidateDeploymentFeedApiKey">
  </Target>

  <Target Name="SetupVersion">
    <Error Condition="$(PackageVersion) == ''" Text="PackageVersion parameter must be specified" />
    <ReplaceFileText
      InputFilename="$(SolutionDir)\setup.py"
      OutputFilename="$(SolutionDir)\setup.py"
      MatchExpression="version='0.0.1'"
      ReplacementText="version='$(LibVersion)'" />
  </Target>

  <Target Name="BuildPython" DependsOnTargets="SetupVersion">
    <!-- Build python library and documentation. Expect generated wheel and html output in $(BuildDir) -->
    <Exec Command="tox -c tox-deploy.ini" WorkingDirectory="$(SolutionDir)" />

    <ItemGroup>
      <_WheelItem Include="$(BuildDir)\*.whl"/>
      <_HtmlItem Include="$(BuildDir)\html\*.*"/>
    </ItemGroup>

    <Error Condition="!Exists('%(_WheelItem.FullPath)')" Text="Wheel file not built" />
    <Error Condition="!Exists('%(_HtmlItem.FullPath)')" Text="Documentation files not built" />
  </Target>

  <Target Name="BuildPackage" DependsOnTargets="BuildPython">
    <!-- Locate .nuspec file and package it -->
    <ItemGroup>
      <_NuspecItem Include="$(DeployDir)\*.nuspec" />
    </ItemGroup>
    <PropertyGroup>
      <ProjectName>%(_NuspecItem.Filename)</ProjectName>
      <NuSpecFilename>%(_NuspecItem.Filename).nuspec</NuSpecFilename>
      <NugetDir>$(BuildDir)\pkg</NugetDir>
      <PackageOutputDir>$(BuildDir)</PackageOutputDir>
      <PackageDeployScript>$(DeployDir)\scripts\*.ps1</PackageDeployScript>
      <PythonWheelFile>$(BuildDir)\*$(LibVersion)*.whl</PythonWheelFile>
      <PythonDocFiles>$(BuildDir)\html\**\*</PythonDocFiles>
    </PropertyGroup>
    <ConvertToAbsolutePath Paths="$(NugetDir)">
      <Output TaskParameter="AbsolutePaths" PropertyName="NugetAbsoluteDir"/>
    </ConvertToAbsolutePath>
    <ConvertToAbsolutePath Paths="$(PackageOutputDir)">
      <Output TaskParameter="AbsolutePaths" PropertyName="PackageOutputAbsDir"/>
    </ConvertToAbsolutePath>
    <PropertyGroup>
      <NuSpecSourceFilePath>$(DeployDir)\$(NuSpecFilename)</NuSpecSourceFilePath>
      <NuSpecFilePath>$(NugetAbsoluteDir)\$(NuSpecFilename)</NuSpecFilePath>
    </PropertyGroup>

    <!-- Copy all files that goes into the Octopus package into the working folder -->
    <ItemGroup>
      <PackageSourceFiles Include="$(PackageDeployScript)" />
      <PackageSourceFiles Include="$(PythonWheelFile)" />
      <PackageSourceFiles Include="$(NuSpecSourceFilePath)" />
      <PackageDocFiles Include="$(PythonDocFiles)" />
    </ItemGroup>
    <Copy SourceFiles="@(PackageSourceFiles)" DestinationFolder="$(NugetAbsoluteDir)\%(RecursiveDir)" />
    <Copy SourceFiles="@(PackageDocFiles)" DestinationFolder="$(NugetAbsoluteDir)\docs\v$(LibVersion)\%(RecursiveDir)" />

    <!-- Octopack it! -->
    <Message Text="Packaging up $(NuSpecFilename) v$(PackageVersion)" />
    <CreateOctoPackPackage
      NuSpecFileName="$(NuSpecFilename)"
      ContentFiles=""
      WrittenFiles=""
      OutDir="$(PackageOutputAbsDir)"
      ProjectDirectory="$(NugetAbsoluteDir)"
      ProjectName="$(ProjectName)"
      PackageVersion="$(PackageVersion)"
      PrimaryOutputAssembly="na"
      ReleaseNotesFile=""
      NuGetProperties="" />
  </Target>

  <Target Name="Build" DependsOnTargets="BuildPackage">
  </Target>

  <Target Name="PushPackages" DependsOnTargets="Build;ValidateDeploymentFeedApiKey">
    <!-- Copy Deployment packages to feed -->
    <ItemGroup>
      <DeployPackages Include="$(BuildDir)\*.$(PackageVersion).nupkg" />
    </ItemGroup>

    <Message Text="Pushing nuget packages:" />
    <Message Text="@(DeployPackages)" />

    <!-- Finally, push packages to deployment feed -->
    <Exec Command="$(NuGetExePath) push %(DeployPackages.Identity) -Source $(DeploymentFeedPath) -ApiKey $(DeploymentFeedApiKey) -Timeout 180 -NonInteractive" IgnoreExitCode="True">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
    </Exec>
    <Message Text="TAG: RETRY1 due to $(ErrorCode)"/>
    <Exec Command="$(NuGetExePath) push %(DeployPackages.Identity) -Source $(DeploymentFeedPath) -ApiKey $(DeploymentFeedApiKey) -Timeout 180 -NonInteractive"
          Condition="$(ErrorCode)!='0'" IgnoreExitCode="True">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
    </Exec>
    <Message Text="TAG: RETRY2 due to $(ErrorCode)"/>
    <Exec Command="$(NuGetExePath) push %(DeployPackages.Identity) -Source $(DeploymentFeedPath) -ApiKey $(DeploymentFeedApiKey) -Timeout 180 -NonInteractive"
          Condition="$(ErrorCode)!='0'" />
  </Target>

  <Target Name="PushToEnvironment" DependsOnTargets="ValidateKeys;PushPackages">
    <PropertyGroup>
      <OctoCreateRelease>$(OctoExePath) create-release --server=$(OctopusServer) --apiKey=$(OctopusApiKey) --project=$(OctopusProject) --releasenumber=$(PackageVersion) --packageversion=$(PackageVersion)</OctoCreateRelease>
      <OctoDeployRelease>$(OctoExePath) deploy-release --server=$(OctopusServer) --apiKey=$(OctopusApiKey) --project=$(OctopusProject) --releasenumber=$(PackageVersion) --deployto=$(OctopusTargetEnvironment)</OctoDeployRelease>
    </PropertyGroup>

    <Exec Condition="$(OctopusCreateRelease) == 'True'" Command="$(OctoCreateRelease)" />
    <Exec Condition="$(OctopusPerformDeploy) == 'True'" Command="$(OctoDeployRelease)" />
  </Target>

</Project>